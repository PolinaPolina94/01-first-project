{"version":3,"file":"static/js/247.0c347072.chunk.js","mappings":"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","sources":["webpack://01-first-project/./src/components/Profail/MyPosts/MyPosts.module.css?b946","webpack://01-first-project/./src/components/Profail/MyPosts/Post/Post.module.css?e0c7","components/Profail/MyPosts/Post/Post.jsx","components/Profail/MyPosts/MyPosts.jsx","components/Profail/MyPosts/MyPostsContainer.jsx","webpack://01-first-project/./src/components/Profail/ProfileInfo/ProfileInfo.module.css?7192","components/Profail/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profail/ProfileInfo/ProfileDataForm.jsx","components/Profail/ProfileInfo/ProfileInfo.jsx","components/Profail/Profile.jsx","components/Profail/ProfileContainer.jsx","hoc/withAuthRedirect.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"foto\":\"MyPosts_foto__Wy-Tv\",\"button\":\"MyPosts_button__dBmLN\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__tQYGj\"};","import React from \"react\"\r\nimport classes from './Post.module.css'\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div>\r\n            <div className={classes.item}>\r\n                <img src=\"https://i1.sndcdn.com/artworks-1W1ucUu0AroJKisi-8sy04w-t500x500.jpg\" />\r\n\r\n                {props.message}\r\n            </div>\r\n            <span>likes</span>  {props.likesCount}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post ","import React from \"react\";\r\nimport classes from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { required, maxLengthCreator } from \"../../../utils/validators/validators\";\r\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\n/* создаем,компоненту на основе базы данных с постами. Компонента принимает в качестве пропсов параметры сообщений и количество лайков. */\r\n\r\nconst MyPosts = React.memo((props) => {     //Если мы работаем с классовой компонентой, то мы пишем так: class MyPost extends React.PureComponent { render () {...} ... } - PureComponent берет на себя логику метода жизненного цикла shouldComponentUpdate()\r\n    // shouldComponentUpdate(nextProps, nextState) {\r\n    //     return nextProps !== this.props || nextState !== this.state \r\n    // }\r\n    const postElements = \r\n        [...props.postsData]\r\n        .reverse()\r\n            .map(p => {\r\n                return <Post key={p.id} message={p.message} likesCount={p.likesCount} />\r\n            })\r\n\r\n    const addPosts = (values) => {\r\n        props.addPost(values.newPostText);\r\n        values.newPostText = \" \";\r\n            }\r\n    \r\n    return(\r\n        <div>\r\n            <h2> My posts</h2>\r\n            \r\n            <AddPostForm onSubmit={addPosts}/>\r\n            \r\n            <div className={classes.foto}>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n    );\r\n        }); \r\n \r\n\r\n // в компоненте-форме AddPostForm в поле Field при отрисовке компоненты (отдельно созданной \"Textarea\"), передаем ее как ссылку в {} у component\r\nlet AddPostForm = (props) => {\r\n    return (\r\n        <form onSubmit = {props.handleSubmit}>\r\n            <Field component={Textarea} name={\"newPostText\"} \r\n                    placeholder=\"Your post\" value={props.newPostText} \r\n                    validate={[required, maxLength10]} />\r\n            <div> <button> New post</button></div>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddPostForm = reduxForm({\r\n    form: \"PropfileAddPostForm\"\r\n} )(AddPostForm)\r\n\r\n\r\nexport default MyPosts\r\n","import { addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        postsData: state.profailPage.postsData,\r\n        newPostText: state.profailPage.newPostText\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer","// extracted by mini-css-extract-plugin\nexport default {\"foto\":\"ProfileInfo_foto__Qiy2A\",\"user\":\"ProfileInfo_user__+76WZ\",\"links\":\"ProfileInfo_links__Zr2qX\",\"contacts\":\"ProfileInfo_contacts__esUHM\",\"form\":\"ProfileInfo_form__Z4Fqt\",\"formEror\":\"ProfileInfo_formEror__3lrWP\"};","import React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n let [editMode, setEditMode] = useState(false);   //hook useState()\r\n let [status, setStatus] = useState(props.status)\r\n\r\n \r\n useEffect(()=> {\r\n    setStatus(props.status)\r\n }, [props.status])\r\n\r\n \r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateUserStatus(status)\r\n\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)   //получаем новое вписанное/изменнное значение (с помощью e.currentTarget.value) и меняет локальный state\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                   <b>Status:</b> <span onDoubleClick={ activateEditMode }> {props.status || \"no status\"} </span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default ProfileStatusWithHooks; \r\n","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Input, Textarea } from '../../common/FormsControls/FormsControls';\r\nimport classes from \"./ProfileInfo.module.css\"\r\n\r\n\r\nlet ProfileDataForm = ({handleSubmit, profile, error}, props) => {\r\n    return (\r\n        <form className={classes.form} onSubmit={handleSubmit}>\r\n            <div>\r\n                <b>Name:</b> <Field placeholder={\"name\"} name={\"fullName\"} component={Input} />\r\n            </div>\r\n            <div>\r\n                <b>Looking for a job:</b>\r\n                <Field type={\"checkbox\"} name={\"lookingForAJob\"} component={Input} />\r\n            </div>\r\n            <div>\r\n                <b>Job description:</b>\r\n                <Field component={Textarea} name={\"lookingForAJobDescription\"}\r\n                    placeholder=\"Your skills\" value={\"blabla\"} />\r\n            </div>\r\n            <div>\r\n                <b>About me:</b>\r\n                <Field component={Textarea} name={\"aboutMe\"}\r\n                    placeholder=\"write smth about you\" value={\"blabla\"} />\r\n            </div>\r\n            <div>\r\n                <b>Contacts:</b> {Object.keys(profile.contacts).map(key => {\r\n                    return <div key={key} >\r\n                        <b>{key}: {<Field placeholder={key} name={\"contacts.\" + key} component={Input} /> } </b> \r\n                    </div>\r\n                })}\r\n            </div>\r\n\r\n            <div> <button>save</button> </div>\r\n            { error && <div className={classes.formEror}>\r\n            {error} \r\n           </div>}\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nProfileDataForm = reduxForm({\r\n    form: 'edit-profile',\r\n    enableReinitialize: true, destroyOnUnmount: false\r\n})(ProfileDataForm)\r\n\r\n\r\nexport default ProfileDataForm","import React, { useState } from \"react\"\r\nimport Preloader from \"../../common/Preloader/Preloader\"\r\nimport classes from \"./ProfileInfo.module.css\"\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\"\r\nimport userPhoto from '../../../assets/images/user.png'\r\nimport ProfileDataForm from \"./ProfileDataForm\"\r\n\r\nconst ProfileInfo = (props) => {\r\n\r\n  let [editMode, setEditMode] = useState(false);   //hook useState()\r\n\r\n\r\n  if (!props.profile) {\r\n    return <Preloader />\r\n  }\r\n\r\n  const onMainPhotoSelected = (e) => {\r\n    if (e.target.files.length) {\r\n      props.savePhoto(e.target.files[0])\r\n    }\r\n  }\r\n\r\n  const onSubmit = (formData) => {\r\n   props.saveProfile(formData).then(()=> {\r\n    setEditMode(false);\r\n\r\n   }) \r\n   }\r\n\r\n\r\n  return (\r\n    <div className={classes.user}>\r\n      <div className={classes.foto}>\r\n        <img src={props.profile.photos.large || userPhoto} alt=\"avatar_photo\" />\r\n\r\n        {props.isOwner && <input type={\"file\"} onChange={onMainPhotoSelected} />}\r\n\r\n        { editMode \r\n          ? <ProfileDataForm initialValues={props.profile} profile={props.profile} onSubmit={onSubmit}/> \r\n          : <ProfileData {...props} goToEditMode={()=>{setEditMode(true)}} isOwner={props.isOwner}/> }\r\n       \r\n        <div> <ProfileStatusWithHooks status={props.status} updateUserStatus={props.updateUserStatus} /> </div> \r\n\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n// Компонента, в которая отрисовывает данные пользователя, которые находятся в profile \r\nconst ProfileData = (props) => {\r\n  return (\r\n    <div>\r\n      {props.isOwner && <div> <button onClick={props.goToEditMode}>Edit</button></div>}\r\n      <div>\r\n        <b>Name:</b> {props.profile.fullName}\r\n      </div>\r\n      <div>\r\n        <b>Looking for a job:</b> {props.profile.lookingForAJob ? \"yes\" : \"no\"}\r\n      </div>\r\n      {props.profile.lookingForAJob &&\r\n        <div>\r\n          <b>Job description:</b> {props.profile.lookingForAJobDescription}\r\n        </div>\r\n      }\r\n      <div>\r\n        <b>About me:</b> {props.profile.aboutMe}\r\n      </div>\r\n      <div>\r\n        <b>Contacts:</b> {Object.keys(props.profile.contacts).map(key => {\r\n          return <Contact key={key} contactTitle={key} contactValue={props.profile.contacts[key]} />\r\n        })}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nconst Contact = ({ contactTitle, contactValue }) => {\r\n  return <div className={classes.contacts}> <b>{contactTitle}</b> : {contactValue} </div>\r\n}\r\n\r\nexport default ProfileInfo","import React from \"react\"\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\n\r\nconst Profile = (props) => {\r\n\r\n      return (\r\n            <div>\r\n                  <ProfileInfo isOwner={props.isOwner} savePhoto={props.savePhoto} saveProfile={props.saveProfile} profile={props.profile} status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n                  <MyPostsContainer />\r\n            </div>\r\n      );\r\n}\r\n\r\n\r\nexport default Profile\r\n","import React from \"react\"\r\nimport Profile from \"./Profile\";\r\nimport { connect } from \"react-redux\";\r\nimport { getUserProfile, getUserStatus, updateUserStatus, savePhoto, saveProfile} from \"../../redux/profile-reducer\";\r\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\n\r\nfunction withRouter(Component) {\r\n    function ComponentWithRouterProp(props) {\r\n        let location = useLocation();\r\n        let navigate = useNavigate();\r\n        let params = useParams();\r\n        return (\r\n            <Component\r\n                {...props}\r\n                router={{ location, navigate, params }}\r\n            />\r\n        );\r\n    }\r\n    return ComponentWithRouterProp;\r\n}\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    updateProfile() {\r\n        let userId = this.props.router.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.autorizedUserId;\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (this.props.router.params.userId !== prevProps.router.params.userId ) {\r\n        this.updateProfile() }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props}\r\n                isOwner={!this.props.router.params.userId}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateUserStatus={this.props.updateUserStatus}\r\n                savePhoto={this.props.savePhoto} \r\n                saveProfile={this.props.saveProfile}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        profile: state.profailPage.profile,\r\n        status: state.profailPage.status,\r\n        autorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n// // HOC-компонента, возвращающая контейнерную компоненту и выполняющая логику по перенаправлению на страницу логинизации незарегестрированного пользователя (см.папку hoc/ файл withAuthRedirect)\r\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer)\r\n\r\n// const WithUrlDataContainerComponent = withRouter(AuthRedirectComponent);\r\n\r\n// export default connect (mapStateToProps, {getUserProfile}) (WithUrlDataContainerComponent); \r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { getUserProfile, getUserStatus, updateUserStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)\r\n    (ProfileContainer); ","import React from \"react\"\r\nimport { Navigate } from \"react-router-dom\"\r\nimport { connect } from \"react-redux\";\r\n\r\n// создаем собственный объект с необходимыми нам данными из стейта для hoc \r\n\r\nconst mapStateToPropsForRedirect = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n// HOC-компонента, возвращающая контейнерную компоненту и выполняющая логику по перенаправлению на страницу логинизации незарегестрированного пользователя\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n\r\n        render () {\r\n            if (!this.props.isAuth) {\r\n                return <Navigate to=\"/login\"/> }  //перенаправляет на страницу с логинизацией незарегестрированных пользователей\r\n                \r\n                return <Component {...this.props}/>   \r\n                }           \r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect (mapStateToPropsForRedirect)(RedirectComponent) // оборачиваем RedirectComponent в connect, чтобы был к ним доступ к state из store\r\n\r\n    return ConnectedAuthRedirectComponent\r\n   }\r\n"],"names":["props","className","classes","src","message","likesCount","maxLength10","maxLengthCreator","MyPosts","React","postElements","postsData","reverse","map","p","id","AddPostForm","onSubmit","values","addPost","newPostText","handleSubmit","Field","component","Textarea","name","placeholder","value","validate","required","reduxForm","form","connect","state","profailPage","dispatch","addPostActionCreator","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","autoFocus","onBlur","updateUserStatus","ProfileDataForm","profile","error","Input","type","Object","keys","contacts","key","enableReinitialize","destroyOnUnmount","ProfileData","isOwner","onClick","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","Preloader","photos","large","userPhoto","alt","target","files","length","savePhoto","initialValues","formData","saveProfile","then","ProfileContainer","userId","this","router","params","autorizedUserId","getUserProfile","getUserStatus","updateProfile","prevProps","compose","auth","isAuth","Component","location","useLocation","navigate","useNavigate","useParams","withAuthRedirect","mapStateToPropsForRedirect","RedirectComponent","to"],"sourceRoot":""}