{"version":3,"file":"static/js/692.0ff7fef4.chunk.js","mappings":"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","sources":["webpack://01-first-project/./src/components/Profail/MyPosts/MyPosts.module.css?b946","webpack://01-first-project/./src/components/Profail/MyPosts/Post/Post.module.css?e0c7","components/Profail/MyPosts/Post/Post.jsx","components/Profail/MyPosts/MyPosts.jsx","components/Profail/MyPosts/MyPostsContainer.jsx","webpack://01-first-project/./src/components/Profail/ProfileInfo/ProfileInfo.module.css?7192","components/Profail/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profail/ProfileInfo/ProfileInfo.jsx","components/Profail/Profile.jsx","components/Profail/ProfileContainer.jsx","hoc/withAuthRedirect.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"foto\":\"MyPosts_foto__Wy-Tv\",\"button\":\"MyPosts_button__dBmLN\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__tQYGj\"};","import React from \"react\"\r\nimport classes from './Post.module.css'\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className=\"cla\">\r\n            <div className={classes.item}>\r\n                <img src=\"https://i1.sndcdn.com/artworks-1W1ucUu0AroJKisi-8sy04w-t500x500.jpg\" />\r\n\r\n                {props.message}\r\n            </div>\r\n            <span>likes</span>  {props.likesCount}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Post ","import React from \"react\";\r\nimport classes from './MyPosts.module.css'\r\nimport Post from \"./Post/Post\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { required, maxLengthCreator } from \"../../../utils/validators/validators\";\r\nimport { Textarea } from \"../../common/FormsControls/FormsControls\";\r\n\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\n/* создаем, какбэ функцию, возвращающую компоненту на основе базы данных с постами. Компонента принимает в качестве пропсов параметры сообщений и количество лайков. */\r\n\r\nconst MyPosts = React.memo((props) => {     //Если мы работаем с классовой компонентой, то мы пишем так: class MyPost extends React.PureComponent { render () {...} ... } - PureComponent берет на себя логику метода жизненного цикла shouldComponentUpdate()\r\n\r\n       \r\n    // shouldComponentUpdate(nextProps, nextState) {\r\n    //     return nextProps !== this.props || nextState !== this.state \r\n    // }\r\n\r\n        console.log(\"render\")\r\n\r\n    const postElements = \r\n        [...props.postsData]\r\n        .reverse()\r\n            .map(p => {\r\n                return <Post message={p.message} likesCount={p.likesCount} />\r\n            })\r\n\r\n    const addPosts = (values) => {\r\n\r\n        props.addPost(values.newPostText);\r\n            }\r\n    \r\n    return(\r\n        <div>\r\n            <h2> My posts</h2>\r\n            \r\n            <AddPostForm onSubmit={addPosts}/>\r\n            \r\n            <div className={classes.foto}>\r\n                {postElements}\r\n            </div>\r\n        </div>\r\n    );\r\n        }); \r\n\r\n\r\n\r\n \r\n\r\n // в компоненте-форме AddPostForm в поле Field при отрисовке компоненты (отдельно созданной \"Textarea\"), передаем ее как ссылку в {} у component\r\nlet AddPostForm = (props) => {\r\n    return (\r\n        <form onSubmit = {props.handleSubmit}>\r\n            <Field component={Textarea} name={\"newPostText\"} \r\n                    placeholder=\"Your post\" value={props.newPostText} \r\n                    validate={[required, maxLength10]} />\r\n            <div> <button> New post</button></div>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddPostForm = reduxForm({\r\n    form: \"PropfileAddPostForm\"\r\n} )(AddPostForm)\r\n\r\n\r\nexport default MyPosts\r\n","import { addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        postsData: state.profailPage.postsData,\r\n        newPostText: state.profailPage.newPostText\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer","// extracted by mini-css-extract-plugin\nexport default {\"foto\":\"ProfileInfo_foto__Qiy2A\",\"avatar\":\"ProfileInfo_avatar__qPxne\",\"links\":\"ProfileInfo_links__Zr2qX\"};","import React from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n let [editMode, setEditMode] = useState(false);   //hook useState()\r\n let [status, setStatus] = useState(props.status)\r\n\r\n \r\n useEffect(()=> {\r\n    setStatus(props.status)\r\n }, [props.status])\r\n\r\n\r\n \r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateUserStatus(status)\r\n\r\n    }\r\n\r\n    const onStatusChange = (e) => {\r\n        setStatus(e.currentTarget.value)   //получаем новое вписанное/изменнное значение (с помощью e.currentTarget.value) и меняет локальный state\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode &&\r\n                <div>\r\n                    <span onDoubleClick={ activateEditMode }> {props.status || \"no status\"} </span>\r\n                </div>\r\n            }\r\n            {editMode &&\r\n                <div>\r\n                    <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status}/>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default ProfileStatusWithHooks; \r\n","import React from \"react\"\r\nimport Preloader from \"../../common/Preloader/Preloader\"\r\nimport classes from \"./ProfileInfo.module.css\"\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\"\r\n\r\nconst ProfileInfo = (props) => {\r\n\r\n    if (!props.profile) {\r\n       return  <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n<div className={classes.foto}>\r\n      <img src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRWi7T29K2PWoVqpH-DCi12Cbs5r5VDzeVhBw&usqp=CAU\" alt=\"cat\"/>\r\n      </div>\r\n      <div className={classes.avatar}>\r\n        <img src={props.profile.photos.large} alt=\"avatar_photo\"/>\r\n        \r\n      <div> <ProfileStatusWithHooks status={props.status} updateUserStatus={props.updateUserStatus}/> </div>\r\n\r\n      <div className={classes.links}> \r\n      <a href=\"https://twitter.com\">{props.profile.contacts.twitter}</a> \r\n      <a href=\"https://vk.com/\">{props.profile.contacts.vk}</a>  \r\n      <a href=\"https://www.instagram.com/\">{props.profile.contacts.instagram}</a> \r\n      <a href=\"https://github.com/\">{props.profile.contacts.github}</a> \r\n     \r\n      </div>\r\n\r\n      </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo","import React from \"react\"\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\n\r\nconst Profile = (props) => {\r\n\r\n      return (\r\n            <div>\r\n                  <ProfileInfo profile={props.profile} status={props.status} updateUserStatus={props.updateUserStatus}/>\r\n                  <MyPostsContainer />\r\n            </div>\r\n      );\r\n}\r\n\r\n\r\nexport default Profile\r\n","import React from \"react\"\r\nimport Profile from \"./Profile\";\r\nimport { connect } from \"react-redux\";\r\nimport { getUserProfile, getUserStatus, updateUserStatus } from \"../../redux/profile-reducer\";\r\nimport { useLocation, useNavigate, useParams, Navigate} from \"react-router-dom\"; \r\nimport { compose } from \"redux\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\n\r\nfunction withRouter(Component) {\r\n    function ComponentWithRouterProp(props) {\r\n        let location = useLocation();\r\n        let navigate = useNavigate();\r\n        let params = useParams();\r\n        return (\r\n            <Component\r\n                {...props}\r\n                router={{ location, navigate, params }}\r\n            />\r\n        );\r\n    }\r\n    return ComponentWithRouterProp;\r\n}\r\n\r\nclass ProfileContainer extends React.Component {\r\n        \r\n    componentDidMount () {\r\n        \r\n        let userId = this.props.router.params.userId;\r\n        if (!userId) {\r\n            //  debugger;\r\n            userId = this.props.autorizedUserId;\r\n            }\r\n        //  if (!userId) {\r\n        //     this.props.history.push(\"/login\");\r\n        // this.props.router.location.pathname(\"/login\")\r\n\r\n        this.props.getUserProfile(userId);\r\n        this.props.getUserStatus(userId)\r\n\r\n }\r\n\r\n    render () {\r\n\r\n\r\n        return (\r\n           <Profile {...this.props} \r\n           profile={this.props.profile}\r\n            status={this.props.status} \r\n            updateUserStatus= {this.props.updateUserStatus} />    \r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        profile: state.profailPage.profile,  \r\n        status: state.profailPage.status,\r\n        autorizedUserId: state.auth.id,\r\n        isAuth: state.auth.isAuth       \r\n    }\r\n}\r\n// // HOC-компонента, возвращающая контейнерную компоненту и выполняющая логику по перенаправлению на страницу логинизации незарегестрированного пользователя (см.папку hoc/ файл withAuthRedirect)\r\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer)\r\n\r\n// const WithUrlDataContainerComponent = withRouter(AuthRedirectComponent);\r\n\r\n// export default connect (mapStateToProps, {getUserProfile}) (WithUrlDataContainerComponent); \r\n\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, { getUserProfile, getUserStatus, updateUserStatus }),\r\n    withRouter,\r\n    withAuthRedirect\r\n)\r\n    (ProfileContainer); ","import React from \"react\"\r\nimport { Navigate } from \"react-router-dom\"\r\nimport { connect } from \"react-redux\";\r\n\r\n// создаем собственный объект с необходимыми нам данными из стейта для hoc \r\n\r\nconst mapStateToPropsForRedirect = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n// HOC-компонента, возвращающая контейнерную компоненту и выполняющая логику по перенаправлению на страницу логинизации незарегестрированного пользователя\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n\r\n        render () {\r\n            if (!this.props.isAuth) {\r\n                return <Navigate to=\"/login\"/> }  //перенаправляет на страницу с логинизацией незарегестрированных пользователей\r\n                \r\n                return <Component {...this.props}/>   \r\n                }           \r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect (mapStateToPropsForRedirect)(RedirectComponent) // оборачиваем RedirectComponent в connect, чтобы был к ним доступ к state из store\r\n\r\n    return ConnectedAuthRedirectComponent\r\n   }\r\n"],"names":["props","className","classes","src","message","likesCount","maxLength10","maxLengthCreator","MyPosts","React","console","log","postElements","postsData","reverse","map","p","AddPostForm","onSubmit","values","addPost","newPostText","handleSubmit","Field","component","Textarea","name","placeholder","value","validate","required","reduxForm","form","connect","state","profailPage","dispatch","addPostActionCreator","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","autoFocus","onBlur","updateUserStatus","profile","alt","photos","large","href","contacts","twitter","vk","instagram","github","Preloader","ProfileContainer","userId","this","router","params","autorizedUserId","getUserProfile","getUserStatus","compose","auth","id","isAuth","Component","location","useLocation","navigate","useNavigate","useParams","withAuthRedirect","mapStateToPropsForRedirect","RedirectComponent","to"],"sourceRoot":""}