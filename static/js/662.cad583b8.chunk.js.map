{"version":3,"file":"static/js/662.cad583b8.chunk.js","mappings":"sLACA,G,QAAA,CAAgB,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,aAAe,8BAA8B,QAAU,2B,mBCgBtL,EAbmB,SAACA,GAChB,IAAIC,EAAO,sBAAiBD,EAAME,IAE9B,OACA,iBAAKC,UAAWC,EAAAA,OAAhB,WAEI,gBAAKC,IAAI,uEAET,UAAC,KAAD,CAASC,GAAIL,EAAb,cAAqBD,EAAMO,KAA3B,WCAZ,EAToB,SAACP,GACjB,OACI,iBAAKG,UAAWC,EAAAA,QAAhB,WACI,gBAAKC,IAAI,yEACRL,EAAMQ,Y,uCCCbC,GAAcC,EAAAA,EAAAA,GAAiB,IAoCjCC,EAAiB,SAACX,GAClB,OACI,kBAAMY,SAAUZ,EAAMa,aAAtB,WACI,SAACC,EAAA,EAAD,CAAOC,UAAWC,EAAAA,EAAUT,KAAM,iBAAkBU,YAAY,qBAC5DC,SAAU,CAACC,EAAAA,EAAUV,MAEzB,0BACI,6CAMhBE,GAAiBS,EAAAA,EAAAA,GAAU,CACvBC,KAAM,2BADOD,CAEdT,GAEH,MAnDgB,SAACX,GACb,IAAMsB,EAAiBtB,EAAMuB,YAAYC,KAAI,SAAAC,GACzC,OAAO,SAAC,EAAD,CAAYlB,KAAMkB,EAAElB,KAAML,GAAIuB,EAAEvB,QAGrCwB,EAAkB1B,EAAM2B,aAAaH,KAAI,SAAAI,GAC3C,OAAO,SAAC,EAAD,CAAapB,QAASoB,EAAEpB,aAOnC,OACI,iBAAKL,UAAWC,EAAAA,QAAhB,WACI,gBAAKD,UAAWC,EAAAA,YAAhB,SACKkB,KAGL,gBAAKnB,UAAWC,EAAAA,SAAhB,UACI,iBAAKD,UAAWC,EAAAA,aAAhB,WACI,yBACKsB,KAEL,mBAEA,SAACf,EAAD,CAAgBC,SAjBf,SAACiB,GACd7B,EAAM8B,eAAeD,EAAOE,4B,oBCWpC,GAAeC,E,QAAAA,KACXC,EAAAA,EAAAA,KAzBoB,SAACC,GACrB,MAAO,CACHX,YAAaW,EAAMC,YAAYZ,YAC/BI,aAAcO,EAAMC,YAAYR,aAChCI,eAAgBG,EAAMC,YAAYJ,mBAIf,SAACK,GACxB,MAAO,CACHN,eAAgB,SAACC,GACbK,GAASC,EAAAA,EAAAA,IAA4BN,SAe7CO,EAAAA,EAFJ,CAIKC,I,iJC7BCC,EAA6B,SAACN,GAChC,MAAO,CACHO,OAAQP,EAAMQ,KAAKD,SAKdH,EAAmB,SAACK,GAAe,IAEtCC,EAFqC,0IAIvC,WACI,OAAKC,KAAK7C,MAAMyC,QAGL,SAACE,GAAD,UAAeE,KAAK7C,SAFpB,SAAC,KAAD,CAAUM,GAAG,eANW,GAEXwC,EAAAA,WAYhC,OAFqCb,EAAAA,EAAAA,IAASO,EAATP,CAAqCW","sources":["webpack://01-first-project/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.jsx","components/Dialogs/MessageItem/MessageItem.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx","hoc/withAuthRedirect.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__QymQ-\",\"dialogsItem\":\"Dialogs_dialogsItem__70Rvz\",\"dialog\":\"Dialogs_dialog__TMLym\",\"messagesItem\":\"Dialogs_messagesItem__lQuZK\",\"message\":\"Dialogs_message__WW4wR\"};","import React from \"react\"\r\nimport { NavLink } from \"react-router-dom\";\r\nimport classes from \"./../Dialogs.module.css\"\r\n\r\nconst DialogItem = (props) => {\r\n    let path = \"/dialogs/\" + `${props.id}`\r\n\r\n        return (\r\n        <div className={classes.dialog}>\r\n\r\n            <img src='http://4lapki.com/wp-content/uploads/2019/01/LPUavVJh-300x300.jpg' />\r\n\r\n            <NavLink to={path}> {props.name} </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem ","import classes from \"./../Dialogs.module.css\"\r\n\r\n\r\nconst MessageItem = (props) => {\r\n    return (\r\n        <div className={classes.message}>\r\n            <img src=\"https://iteen.by/local/templates/.default/img/tmp/main-pic-bg_01.png\"/>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MessageItem","import React from \"react\";\r\nimport classes from \"./Dialogs.module.css\"\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport MessageItem from \"./MessageItem/MessageItem\";\r\nimport { Field, reduxForm } from 'redux-form'\r\nimport { required, maxLengthCreator } from \"../../utils/validators/validators\";\r\nimport { Textarea } from \"../common/FormsControls/FormsControls\";\r\n\r\nconst maxLength50 = maxLengthCreator(50); \r\n\r\nconst Dialogs = (props) => {\r\n    const dialogElements = props.dialogsData.map(d => {\r\n        return <DialogItem name={d.name} id={d.id} />\r\n    })\r\n\r\n    const messageElements = props.messagesData.map(m => {\r\n        return <MessageItem message={m.message} />\r\n    })\r\n\r\n    let addMessage = (values) => {\r\n        props.sendNewMessage(values.newMessageText)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItem}>\r\n                {dialogElements}\r\n            </div>\r\n\r\n            <div className={classes.messages}>\r\n                <div className={classes.messagesItem}>\r\n                    <div>\r\n                        {messageElements}\r\n                    </div>\r\n                    <br />\r\n\r\n                    <AddMessageForm onSubmit={addMessage} />\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nlet AddMessageForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field component={Textarea} name={\"newMessageText\"} placeholder=\"Enter your message\" \r\n                validate={[required, maxLength50]}\r\n                />\r\n            <div>\r\n                <button> post </button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddMessageForm = reduxForm({\r\n    form: 'dialog-add-message-form'\r\n})(AddMessageForm)\r\n\r\nexport default Dialogs;  ","import { sendNewMessageActionCreator } from \"../../redux/dialogs-reduser\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport { connect } from \"react-redux\";\r\nimport { withAuthRedirect } from \"../../hoc/withAuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        dialogsData: state.dialogsPage.dialogsData,\r\n        messagesData: state.dialogsPage.messagesData,\r\n        newMessageText: state.dialogsPage.newMessageText\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        sendNewMessage: (newMessageText) => {\r\n            dispatch(sendNewMessageActionCreator(newMessageText));\r\n        }\r\n    }\r\n}\r\n\r\n// // HOC-компонента, возвращающая контейнерную компоненту и выполняющая логику по перенаправлению на страницу логинизации незарегестрированного пользователя\r\n// let AuthRedirectComponent = withAuthRedirect(Dialogs)\r\n\r\n\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(AuthRedirectComponent);\r\n\r\n// export default DialogsContainer;  \r\n\r\nexport default compose(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)\r\n    (Dialogs);","import React from \"react\"\r\nimport { Navigate } from \"react-router-dom\"\r\nimport { connect } from \"react-redux\";\r\n\r\n// создаем собственный объект с необходимыми нам данными из стейта для hoc \r\n\r\nconst mapStateToPropsForRedirect = (state) => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\n// HOC-компонента, возвращающая контейнерную компоненту и выполняющая логику по перенаправлению на страницу логинизации незарегестрированного пользователя\r\nexport const withAuthRedirect = (Component) => {\r\n\r\n    class RedirectComponent extends React.Component {\r\n\r\n        render () {\r\n            if (!this.props.isAuth) {\r\n                return <Navigate to=\"/login\"/> }  //перенаправляет на страницу с логинизацией незарегестрированных пользователей\r\n                \r\n                return <Component {...this.props}/>   \r\n                }           \r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect (mapStateToPropsForRedirect)(RedirectComponent) // оборачиваем RedirectComponent в connect, чтобы был к ним доступ к state из store\r\n\r\n    return ConnectedAuthRedirectComponent\r\n   }\r\n"],"names":["props","path","id","className","classes","src","to","name","message","maxLength50","maxLengthCreator","AddMessageForm","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","reduxForm","form","dialogElements","dialogsData","map","d","messageElements","messagesData","m","values","sendNewMessage","newMessageText","compose","connect","state","dialogsPage","dispatch","sendNewMessageActionCreator","withAuthRedirect","Dialogs","mapStateToPropsForRedirect","isAuth","auth","Component","RedirectComponent","this","React"],"sourceRoot":""}